AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda-backed Custom Resource Example'

Parameters:
  PasswordLength:
    Type: Number
    Default: 16
    MinValue: 8
    MaxValue: 32
    Description: Length of the generated password

Resources:
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - ssm:GetParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/custom-resource/*'

  # Lambda Function for Custom Resource
  CustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CustomResourcePasswordGenerator
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import random
          import string
          import urllib3
          
          def lambda_handler(event, context):
              print(f"Event: {json.dumps(event)}")
              
              response_url = event['ResponseURL']
              stack_id = event['StackId']
              request_id = event['RequestId']
              logical_resource_id = event['LogicalResourceId']
              request_type = event['RequestType']
              
              # Default response
              response_data = {}
              physical_resource_id = f"CustomResource-{logical_resource_id}"
              status = 'SUCCESS'
              reason = ''
              
              try:
                  ssm = boto3.client('ssm')
                  
                  if request_type == 'Create':
                      # Generate random password
                      password_length = int(event['ResourceProperties'].get('PasswordLength', 16))
                      password = generate_password(password_length)
                      
                      # Store in SSM Parameter Store
                      parameter_name = f"/custom-resource/password-{request_id[:8]}"
                      ssm.put_parameter(
                          Name=parameter_name,
                          Value=password,
                          Type='SecureString',
                          Description='Password generated by custom resource'
                      )
                      
                      response_data = {
                          'ParameterName': parameter_name,
                          'PasswordLength': password_length,
                          'Message': 'Password generated and stored successfully'
                      }
                      physical_resource_id = parameter_name
                      
                  elif request_type == 'Update':
                      # Update password if length changed
                      old_parameter = event.get('PhysicalResourceId', '')
                      password_length = int(event['ResourceProperties'].get('PasswordLength', 16))
                      password = generate_password(password_length)
                      
                      if old_parameter.startswith('/custom-resource/'):
                          ssm.put_parameter(
                              Name=old_parameter,
                              Value=password,
                              Type='SecureString',
                              Overwrite=True
                          )
                          physical_resource_id = old_parameter
                      
                      response_data = {
                          'ParameterName': physical_resource_id,
                          'PasswordLength': password_length,
                          'Message': 'Password updated successfully'
                      }
                      
                  elif request_type == 'Delete':
                      # Clean up SSM parameter
                      parameter_name = event.get('PhysicalResourceId', '')
                      if parameter_name.startswith('/custom-resource/'):
                          try:
                              ssm.delete_parameter(Name=parameter_name)
                              response_data['Message'] = 'Parameter deleted successfully'
                          except ssm.exceptions.ParameterNotFound:
                              response_data['Message'] = 'Parameter not found (already deleted)'
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  status = 'FAILED'
                  reason = str(e)
                  response_data = {'Error': str(e)}
              
              # Send response back to CloudFormation
              send_response(response_url, {
                  'Status': status,
                  'Reason': reason,
                  'PhysicalResourceId': physical_resource_id,
                  'StackId': stack_id,
                  'RequestId': request_id,
                  'LogicalResourceId': logical_resource_id,
                  'Data': response_data
              })
              
              return {'statusCode': 200}
          
          def generate_password(length):
              characters = string.ascii_letters + string.digits + "!@#$%^&*"
              return ''.join(random.choice(characters) for _ in range(length))
          
          def send_response(url, response_body):
              http = urllib3.PoolManager()
              response = http.request('PUT', url, 
                                    body=json.dumps(response_body),
                                    headers={'Content-Type': 'application/json'})
              print(f"Response status: {response.status}")

  # Custom Resource that uses the Lambda function
  PasswordGenerator:
    Type: Custom::PasswordGenerator
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn
      PasswordLength: !Ref PasswordLength
      # Trigger update when this changes
      UpdateTrigger: !Sub '${AWS::StackName}-${AWS::Region}'

  # Example EC2 instance that uses the generated password
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub 
                  - 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterName}'
                  - ParameterName: !GetAtt PasswordGenerator.ParameterName

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  DemoInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash
            yum update -y
            yum install -y aws-cli
            
            # Retrieve the generated password from SSM
            PASSWORD=$(aws ssm get-parameter --name "${ParameterName}" --with-decryption --region ${AWS::Region} --query 'Parameter.Value' --output text)
            echo "Retrieved password length: ${!#PASSWORD}" > /tmp/password-info.txt
            echo "Password retrieved successfully from ${ParameterName}" >> /tmp/password-info.txt
          - ParameterName: !GetAtt PasswordGenerator.ParameterName
      Tags:
        - Key: Name
          Value: CustomResourceDemo

Outputs:
  ParameterName:
    Description: SSM Parameter name containing the generated password
    Value: !GetAtt PasswordGenerator.ParameterName
  
  PasswordLength:
    Description: Length of the generated password
    Value: !GetAtt PasswordGenerator.PasswordLength
  
  CustomResourceMessage:
    Description: Message from custom resource
    Value: !GetAtt PasswordGenerator.Message
  
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt CustomResourceFunction.Arn